<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on 安迪兒隨手貼</title>
    <link>https://bowwow.tips/tags/docker/</link>
    <description>Recent content in Docker on 安迪兒隨手貼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;#169; by 安迪兒</copyright>
    <lastBuildDate>Sat, 30 Jul 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://bowwow.tips/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker 1.12的黑魔法</title>
      <link>https://bowwow.tips/post/20160730/</link>
      <pubDate>Sat, 30 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bowwow.tips/post/20160730/</guid>
      <description>

&lt;p&gt;今年2016 Docker Conf 發表後&lt;br /&gt;
引起大家狂熱的討論，整個會場都高潮了~XD&lt;/p&gt;

&lt;p&gt;[引用一下相關的結論文章]&lt;br /&gt;
&lt;strong&gt;DockerCon 2016會議：發布內容的總結及主要收穫&lt;/strong&gt;
原文網址：&lt;a href=&#34;https://kknews.cc/tech/mmx4yp.html&#34;&gt;https://kknews.cc/tech/mmx4yp.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Swarm 已死！Docker Swarm 萬歲！&lt;/strong&gt;
原文網址：&lt;a href=&#34;https://kknews.cc/tech/8e2egq.html&#34;&gt;https://kknews.cc/tech/8e2egq.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;官方無敵威的展示影片:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;官方無敵威的展示影片&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=F7hoq0KwHD4&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/F7hoq0KwHD4/0.jpg&#34; alt=&#34;Alt text&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
看完影片後，安迪兒超期待新版Docker1.12的發表&lt;br /&gt;
等到了rc2，就迫不急待的試玩一下&lt;br /&gt;
因為安迪兒想把舊式的swarm換成新的docker swarm&lt;br /&gt;
就這樣一路從Docker1.12 rc2 rc3 rc4都玩了一遍&lt;br /&gt;
(因為不少問題和bug，所以才會一直試到rc4 &amp;hellip;orz)&lt;/p&gt;

&lt;p&gt;終於今天Docker v1.12.0正式定版&lt;br /&gt;
Docker大大們開發的能量超強大&lt;br /&gt;
每一版都更新很快，也修了一大堆東西~XD&lt;br /&gt;
&lt;a href=&#34;https://github.com/docker/docker/releases&#34;&gt;https://github.com/docker/docker/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;既然Docker v1.12定版了&lt;br /&gt;
安迪兒也馬上全新安裝&lt;br /&gt;
順便記錄一下和分享試用Docker 1.12的心得&lt;/p&gt;

&lt;h4 id=&#34;這次的docker增加不少新功能:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;[這次的docker增加不少新功能]&lt;/h4&gt;

&lt;h4 id=&#34;swarm:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;Swarm&lt;/h4&gt;

&lt;p&gt;安迪兒其實是為了這個功能&lt;br /&gt;
才會一直的在try
因為舊版的Swarm其實有點麻煩&lt;br /&gt;
要建置Consul Key Store daemon&lt;br /&gt;
要建overlay的網路&lt;br /&gt;
還要再自已寫一堆腳本去監控和偵測狀態和處理的方式&lt;/p&gt;

&lt;p&gt;而新版的docker 1.12整合了Swarm&lt;br /&gt;
也有了新的swarm cluster使用和管理方式&lt;br /&gt;
大大的簡化了整個的流程&lt;/p&gt;

&lt;h4 id=&#34;新的功能:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;新的功能:&lt;/h4&gt;

&lt;h4 id=&#34;docker-service-stack-cloud:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;Docker Service、Stack、Cloud&lt;/h4&gt;

&lt;p&gt;整合stack與service的管理，可以使用deploy把stack部署到cloud上&lt;/p&gt;

&lt;h4 id=&#34;health-check:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;Health check&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/docker/pull/23218&#34;&gt;https://github.com/docker/docker/pull/23218&lt;/a&gt;&lt;br /&gt;
可以自訂節點的健康&lt;br /&gt;
&amp;ndash;health-cmd (health用的指令檔)&lt;br /&gt;
&amp;ndash;health-interval (health的秒數)&lt;br /&gt;
然後用一般的docker inspect就可以查詢check的結果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker inspect --format=&#39;&#39; xxname healthy
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;live-restore:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;Live restore&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/docker/pull/23213&#34;&gt;https://github.com/docker/docker/pull/23213&lt;/a&gt;&lt;br /&gt;
啟動時增加這個參數，daemon掛了也不會影響到container
&amp;ndash;live-restore&lt;/p&gt;

&lt;h4 id=&#34;overlay2:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;overlay2&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/docker/pull/22126&#34;&gt;https://github.com/docker/docker/pull/22126&lt;/a&gt;&lt;br /&gt;
裡面有benchmark的數據可以參考一下&lt;/p&gt;

&lt;p&gt;其它還有很多細的東西、指令、參數之類&lt;br /&gt;
有興趣的，可以多查查官方的說明&lt;br /&gt;
看了這些，應該手癢了吧&lt;/p&gt;

&lt;p&gt;[實作時間到嘍!]&lt;/p&gt;

&lt;h4 id=&#34;1-安裝新版docker-for-1-12:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;1. 安裝新版docker for 1.12&lt;/h4&gt;

&lt;p&gt;參考這頁的說明&lt;br /&gt;
&lt;a href=&#34;https://github.com/docker/docker/releases&#34;&gt;https://github.com/docker/docker/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;執行安裝指令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -fsSL https://experimental.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;sudo usermod -aG docker andy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://goo.gl/EMIf5a&#34; width=&#34;70%&#34;&gt;&lt;br /&gt;
&lt;img src=&#34;https://goo.gl/zogzGo&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-玩玩container的叢集-建一個swarm來玩玩吧:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;2. 玩玩Container的叢集，建一個swarm來玩玩吧&lt;/h4&gt;

&lt;p&gt;首先在master機器上，建立管理的節點&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker swarm init --listen-addr docker112-swarm-admin:2377
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://goo.gl/ymP7Z4&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;再來，在其它台node機器上輸入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker swarm join \
 --token SWMTKN-1-55xrvnhhax0eqc0hi4iu6aihh8msqvlfjdgqetaqvlf8qm4n0z-7ekdghz9an5d4jpx4ibdaigtx \
 10.240.0.3:2377
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://goo.gl/CjM4D4&#34; width=&#34;70%&#34;&gt;&lt;br /&gt;
都加入叢集後，可以在主節點master那台，查一下所有的node&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker node ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://goo.gl/hPGhT6&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;看看，超神奇的，就這樣一個跨機器的Container cluster就立完成了&lt;br /&gt;
這是不是docker的 &lt;strong&gt;黑魔法&lt;/strong&gt; 吶~~~太可怕了，合併swarm後簡化許多繁雜的東西&lt;/p&gt;

&lt;h4 id=&#34;3-新增自已用的network:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;3. 新增自已用的network&lt;/h4&gt;

&lt;p&gt;用docker network 建立一個自已的overlay來玩玩&lt;br /&gt;
建完並指定Container的overlay後，Container就能視為同網段，跨各種機器運行了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker network create --driver overlay bowwow-net  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://goo.gl/xY51ig&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;4-來見識一下讓大家瘋狂的docker-service威力吧:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;4. 來見識一下讓大家瘋狂的Docker Service威力吧&lt;/h4&gt;

&lt;p&gt;建個postgresql database，直接replicas 2台&lt;br /&gt;
2台都是同樣的database&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker service create --replicas 2 -p 5432:5432 -p 8000:5432 --name=postgresql --network=bowwow-net --env=&amp;quot;constraint:node==docker-swarm-node1&amp;quot; --mount type=volume,source=/home/app/metadb,target=/var/lib/postgresql -e POSTGRESQL_USER=postgres -e POSTGRESQL_PASS=1234 -e POSTGRESQL_DB=demodb bowwow/posttgresql9.4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;docker service ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://goo.gl/Vb5Xax&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;可以看到postgresql啟動完成，2台分散在不同的機器上&lt;/p&gt;

&lt;p&gt;直接來玩一下，2台機器的postgresql同時都能連上&lt;br /&gt;
&lt;img src=&#34;https://goo.gl/6W7Eox&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;隨便改一下其中一台，建一個新的table&lt;br /&gt;
&lt;img src=&#34;https://goo.gl/6W7Eox&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;過一會另一台就跟都同步了&lt;br /&gt;
&lt;img src=&#34;https://goo.gl/gWsS1S&#34; width=&#34;70%&#34;&gt;&lt;br /&gt;
而且因為用了bowwow-net的關係&lt;br /&gt;
開三台機器，三台機器都能互相找的到&lt;br /&gt;
也就是說，連上3台機器的ip，都能接上這個postgresql db&lt;br /&gt;
但這個postgresql db是分散成2個Container在跑&lt;br /&gt;
&lt;strong&gt;docker都幫你做了ha、scale和cluster了&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;只能說:超~&lt;del&gt;神&lt;/del&gt;~的!!!&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&#34;隨興的新增和刪除container節點:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;隨興的新增和刪除Container節點&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;docker service ps postgresql
docker service scale postgresql=3
docker service scale postgresql=1
docker service update --replicas 2 postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;新版docker有rolling-update服務:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;新版docker有rolling update服務&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;&amp;ndash;update-delay&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;他會慢慢的更版，不會一次都換掉&lt;br /&gt;
ex:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker service create \
  --replicas 3 \
  --name redis \
  --update-delay 10s \
  redis:3.0.6
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;試一下swarm-container-cluster移轉的功能:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;試一下Swarm Container Cluster移轉的功能&lt;/h5&gt;

&lt;p&gt;惡意關掉刪除其中一台的postgresql Container&lt;br /&gt;
&lt;img src=&#34;https://goo.gl/xVWrW9&#34; width=&#34;70%&#34;&gt;&lt;br /&gt;
&lt;img src=&#34;https://goo.gl/EiFWMM&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;果然夠優~馬上又自動的在別台機器上重啟了一個相同的服務&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一次開10個來玩玩吧&lt;br /&gt;
&lt;img src=&#34;https://goo.gl/fDCI28&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;不想要服務了，刪除它&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker service rm postgresql
docker service ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://goo.gl/pYzbDR&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;新的Docker以上這些功能&lt;br /&gt;
跟本就是有k8s(Kubernetes)的影子&lt;br /&gt;
連相關指令名稱都有點相近&lt;br /&gt;
難怪大家整個看到傻眼，進化後的Docker太強大了。&lt;/p&gt;

&lt;h4 id=&#34;5-部署docker-stack:e75d3bee28da3e2ece5c132dc361a283&#34;&gt;5. 部署Docker Stack&lt;/h4&gt;

&lt;p&gt;大致上看起來&lt;br /&gt;
新的docker swarm像是用service就可以處理&amp;amp;管理相關的container服務&lt;br /&gt;
如果想用之前compose之類的一次啟動管理的方式呢??
安迪兒找了找，發現docker有一個deploy的相關功能&lt;br /&gt;
看了他文字上有說，要用dab來部署&lt;br /&gt;
忍不住好奇試了一下&lt;br /&gt;
真的是可以用&lt;/p&gt;

&lt;p&gt;首先，先裝上最新版的docker-compose(1.8)&lt;br /&gt;
參考這頁&lt;br /&gt;
&lt;a href=&#34;https://github.com/docker/compose/releases&#34;&gt;https://github.com/docker/compose/releases&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://goo.gl/6dB7jy&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;編寫一下docker-compose file&lt;br /&gt;
啟動它，成功後，可以再自行下指令bundle成dab檔&lt;br /&gt;
再使用docker deploy去部署&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker-compose up -d
sudo docker-compose bundle -o elk.dab
docker deploy elk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://goo.gl/Jfuq9q&#34; width=&#34;70%&#34;&gt;&lt;br /&gt;
&lt;img src=&#34;https://goo.gl/FlZqKI&#34; width=&#34;70%&#34;&gt;&lt;br /&gt;
&lt;img src=&#34;https://goo.gl/mqRVTu&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;看一下結果吧&lt;br /&gt;
&lt;img src=&#34;https://goo.gl/Cr71Mu&#34; width=&#34;70%&#34;&gt;&lt;br /&gt;
&lt;img src=&#34;https://goo.gl/QERLf3&#34; width=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;呼&amp;hellip;終於，東西實在太多了，安迪就也沒辦法一次說完試完&lt;br /&gt;
總之，這次的docker 1.12非常的強大&lt;br /&gt;
如果想要有較簡易的，除了k8s或mesos另外選擇的&lt;br /&gt;
也許考慮一下原生的docker看看嘍&lt;br /&gt;
應該不會失望的~~~XD&lt;br /&gt;
收工嘍~收工嘍!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>